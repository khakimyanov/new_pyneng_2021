# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
template = '''Network:
{1:<9}{2:<9}{3:<9}{4:<9}
{1:08b} {2:08b} {3:08b} {4:08b}

Mask:
/{0}
{5:<9}{6:<9}{7:<9}{8:<9}
{5:08b} {6:08b} {7:08b} {8:08b}
'''

ip, mask = input("Введите IP-сети в формате IP/mask: ").split('/')
ip_oct1, ip_oct2, ip_oct3, ip_oct4 = ip.split('.')

bin_ip = ('{:08b}'.format(int(ip_oct1)) + '{:08b}'.format(int(ip_oct2)) +
         '{:08b}'.format(int(ip_oct3)) + '{:08b}'.format(int(ip_oct4)))
bin_mask = '1'*int(mask) + '0'*(32 - int(mask))

subnet = bin_ip[0:int(mask)] + '0'*(32 - int(mask))

subnet_oct1, subnet_oct2, subnet_oct3, subnet_oct4 = [int(subnet[0:8], 2), int(subnet[8:16], 2),
                                                      int(subnet[16:24], 2), int(subnet[24:32], 2)]

mask_oct1, mask_oct2, mask_oct3, mask_oct4 = [int(bin_mask[0:8], 2), int(bin_mask[8:16], 2),
                                             int(bin_mask[16:24], 2), int(bin_mask[24:32], 2)]

print(template.format(mask, int(subnet_oct1), int(subnet_oct2), int(subnet_oct3), 
                      int(subnet_oct4), mask_oct1, mask_oct3, mask_oct3, mask_oct4))
                      
   
